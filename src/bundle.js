!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("tsccs",[],t):"object"==typeof exports?exports.tsccs=t():e.tsccs=t()}(self,(()=>(()=>{"use strict";var e={1:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTheCharacter=void 0;const r=n(79),i=n(854),c=n(918),a=n(446);t.CreateTheCharacter=function(e){return o(this,void 0,void 0,(function*(){try{if(0==(e=i.CharacterRepository.GetCharacter(e.data)).id){const n=yield fetch(r.CreateTheCharacterDataUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!n.ok)throw new Error(`Error! status: ${n.status}`);const o=yield n.json();var t=new a.TheCharacter(o.userId,e.data,0,0,4,4,999,999,"",!1);return t.id=o.id,i.CharacterRepository.AddCharacter(t),o}return new c.Returner(e.id,e.userId,0,!1)}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},310:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTheConceptApi=void 0;const r=n(79);t.CreateTheConceptApi=function(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(r.CreateTheConceptUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return yield t.json()}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},969:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTheConnectionApi=void 0;const r=n(79);t.CreateTheConnectionApi=function(e){return o(this,void 0,void 0,(function*(){try{var t=JSON.stringify(e);const n=yield fetch(r.CreateTheConnectionUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:t});if(!n.ok)throw new Error(`Error! status: ${n.status}`);return yield n.json()}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},773:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTextData=void 0;const r=n(79);t.CreateTextData=function(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(r.CreateTheTextDataUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return yield t.json()}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},403:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetAllConceptsByType=void 0;const r=n(155),i=n(79);t.GetAllConceptsByType=function(e,t){return o(this,void 0,void 0,(function*(){try{var n=new URLSearchParams;n.append("type",e),n.append("user_id",t.toString());const c=yield fetch(i.GetAllConceptsByTypeUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:n});if(!c.ok)throw new Error(`Error! status: ${c.status}`);const a=yield c.json();for(var o=0;o<a.length;o++)r.ConceptsData.AddConcept(a[o])}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},979:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetAllConnectionsOfCompositionOnline=t.GetAllConnectionsOfComposition=void 0;const r=n(193),i=n(79);function c(e){return o(this,void 0,void 0,(function*(){try{var t=[];const o=yield fetch(i.GetAllConnectionsOfCompositionUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`composition_id=${e}`});if(!o.ok)throw new Error(`Error! status: ${o.status}`);const c=yield o.json();for(var n=0;n<c.length;n++)r.ConnectionData.AddConnection(c[n]),r.ConnectionData.AddToDictionary(c[n]),t.push(c[n]);return t}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}t.GetAllConnectionsOfComposition=function(e){return o(this,void 0,void 0,(function*(){var t=[];return 0==(t=r.ConnectionData.GetConnectionsOfCompositionLocal(e)).length?t=yield c(e):c(e),t}))},t.GetAllConnectionsOfCompositionOnline=c},176:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetConcept=void 0;const r=n(155),i=n(79);t.GetConcept=function(e){return o(this,void 0,void 0,(function*(){try{var t=r.ConceptsData.GetConcept(e);if(0!=t.id)return console.log("getting data from local"),t;{console.log("getting data from online");const t=yield fetch(i.GetConceptUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`id=${e}`});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=yield t.json();if(n.id>0)return r.ConceptsData.AddConcept(n),n}}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},12:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetConceptByCharacterAndType=void 0;const r=n(155),i=n(79);t.GetConceptByCharacterAndType=function(e,t){return o(this,void 0,void 0,(function*(){try{var n=yield r.ConceptsData.GetConceptByCharacterAndTypeLocal(e,t);if(null==n||0==n.id){var o={character_value:`${e}`,type_id:t},c=JSON.stringify(o);const r=yield fetch(i.GetConceptByCharacterAndTypeUrl,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:c});if(!r.ok)throw new Error(`Error! status: ${r.status}`);n=yield r.json()}return r.ConceptsData.AddConcept(n),n}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},493:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetConceptByCharacterValue=void 0;const r=n(155),i=n(79);t.GetConceptByCharacterValue=function(e){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(i.GetConceptByCharacterValueUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`character_value=${e}`});if(!t.ok)throw new Error(`Error! status: ${t.status}`);{const e=yield t.json();if(e.id>0)return r.ConceptsData.AddConcept(e),e}}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},895:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetConnectionOfTheConcept=void 0;const r=n(79);t.GetConnectionOfTheConcept=function(e,t,n,i=10,c=1){return o(this,void 0,void 0,(function*(){try{var o=new URLSearchParams;o.append("typeId",`${e}`),o.append("ofTheConceptId",`${t}`),o.append("userId",`${n}`),o.append("inpage",`${i}`),o.append("page",`${c}`);const a=yield fetch(r.GetAllConnectionsOfConceptUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:o});if(!a.ok)throw new Error(`Error! status: ${a.status}`);return yield a.json()}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},621:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetReservedIds=void 0;const r=n(79),i=n(49);t.GetReservedIds=function(){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(r.GetReservedIdUrl,{method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=yield t.json();for(var e=0;e<n.length;e++)i.ReservedIds.AddId(n[e])}catch(e){return e instanceof Error?(console.log("error message: ",e.message),e.message):(console.log("unexpected error: ",e),"An unexpected error occurred")}}))}},79:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CreateTheConnectionUrl=t.CreateTheConceptUrl=t.CreateTheCharacterDataUrl=t.CreateTheTextDataUrl=t.GetReservedIdUrl=t.GetAllAiData=t.GetAllConnectionsOfConceptUrl=t.GetAllConceptsByTypeUrl=t.GetCharacterByCharacterUrl=t.GetConceptByCharacterAndTypeUrl=t.GetConceptByCharacterValueUrl=t.GetAllConnectionsOfCompositionUrl=t.GetAllConnectionsOfUserUrl=t.GetAllConceptsOfUserUrl=t.GetConceptUrl=t.BASE_URL=void 0,t.BASE_URL="https://apischema.freeschema.com",t.GetConceptUrl=t.BASE_URL+"/api/getConcept",t.GetAllConceptsOfUserUrl=t.BASE_URL+"/api/get_all_concepts_of_user",t.GetAllConnectionsOfUserUrl=t.BASE_URL+"/api/get_all_connections_of_user",t.GetAllConnectionsOfCompositionUrl=t.BASE_URL+"/api/get_all_connections_of_composition",t.GetConceptByCharacterValueUrl=t.BASE_URL+"/api/get_concept_by_character_value",t.GetConceptByCharacterAndTypeUrl=t.BASE_URL+"/api/get_concept_by_character_and_type",t.GetCharacterByCharacterUrl=t.BASE_URL+"/api/get_character_by_character",t.GetAllConceptsByTypeUrl=t.BASE_URL+"/api/get_all_concepts_by_type",t.GetAllConnectionsOfConceptUrl=t.BASE_URL+"/api/get-link-connections",t.GetAllAiData="https://devai.freeschema.com/api/get_ranked_type_id",t.GetReservedIdUrl=t.BASE_URL+"/api/get_reserved_ids",t.CreateTheTextDataUrl=t.BASE_URL+"/api/create_text_data",t.CreateTheCharacterDataUrl=t.BASE_URL+"/api/create_character_data",t.CreateTheConceptUrl=t.BASE_URL+"/api/create_the_concept",t.CreateTheConnectionUrl=t.BASE_URL+"/api/create_the_connection"},696:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BinaryTree=void 0;const o=n(853);class r{static addNodeToTree(e){if(null==this.root)return this.root=e,this.root;this.root=this.root.addNode(e,this.root,this.root.height)}static addConceptToTree(e){var t=new o.Node(e.id,e,null,null);this.addNodeToTree(t)}static getNodeFromTree(e){return this.root?this.root.getFromNode(e,this.root):this.root}}t.BinaryTree=r,r.root=null},854:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CharacterRepository=void 0;const o=n(446);class r{constructor(){this.name="character Repository"}static AddCharacter(e){this.characterData[e.id]=e}static GetCharacter(e){for(var t=new o.TheCharacter(0,"0",0,0,0,0,0,0,"0",!1),n=0;n<this.characterData.length;n++)this.characterData[n].data==e&&(t=this.characterData[n]);return t}}t.CharacterRepository=r,r.characterData=[]},204:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Concept=void 0;const o=n(155);t.Concept=class{constructor(e,t,n,r,i,c,a,s,u,d,l,h,f,p,y,v=!1){this.isTemp=!1,this.id=e,this.userId=t,this.typeId=n,this.typeUserId=r,this.categoryId=i,this.categoryUserId=c,this.referentId=a,this.referent=a,this.referentUserId=s,this.characterValue=`${u}`,this.securityId=d,this.securityUserId=l,this.accessId=h,this.accessUserId=f,this.sessionId=p,this.sessionUserId=y,this.x=0,this.y=0,this.type=null,this.isNew=v,o.ConceptsData.AddConcept(this)}getType(){console.log(this.typeId)}}},155:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ConceptsData=void 0;const r=n(204),i=n(943),c=n(696);class a{constructor(){this.name="conceptsArray"}static CheckContains(e){for(var t=!1,n=0;n<this.conceptsArray.length;n++)this.conceptsArray[n].id==e.id&&(t=!0);return t}static AddConcept(e){if(e.id>0){var t=this.CheckContains(e);this.conceptDictionary[e.id]=e,t&&this.RemoveConcept(e),(0,i.storeToDatabase)("concept",e),c.BinaryTree.addConceptToTree(e),this.conceptsArray.push(e)}}static AddConceptTemporary(e){var t=this.CheckContains(e);this.conceptDictionary[e.id]=e,t&&this.RemoveConcept(e),this.conceptsArray.push(e)}static RemoveConcept(e){for(var t=0;t<this.conceptsArray.length;t++)this.conceptsArray[t].id==e.id&&this.conceptsArray.splice(t,1);(0,i.removeFromDatabase)("concept",e.id)}static GetConcept(e){var t=new r.Concept(0,0,0,0,0,0,0,0,"0",0,0,0,0,0,0,!1),n=c.BinaryTree.getNodeFromTree(e);if(null==n?void 0:n.value){var o=n.value;o&&(t=o)}if(0==t.id||null==t)for(var i=0;i<this.conceptsArray.length;i++)this.conceptsArray[i].id==e&&(t=this.conceptsArray[i]);return t}static GetConceptByCharacter(e){return o(this,void 0,void 0,(function*(){for(var t=new r.Concept(0,0,0,0,0,0,0,0,"0",0,0,0,0,0,0,!1),n=0;n<this.conceptsArray.length;n++)this.conceptsArray[n].characterValue==e&&(t=this.conceptsArray[n]);return t}))}static GetConceptByCharacterAndTypeLocal(e,t){return o(this,void 0,void 0,(function*(){for(var n=new r.Concept(0,0,0,0,0,0,0,0,"0",0,0,0,0,0,0,!1),o=yield this.GetConceptsByTypeId(t),i=0;i<o.length;i++)e==o[i].characterValue&&(n=o[i]);return n}))}static GetConceptsByTypeId(e){for(var t=[],n=0;n<this.conceptsArray.length;n++)this.conceptsArray[n].typeId==e&&t.push(this.conceptsArray[n]);return t}getName(){return this.name}}t.ConceptsData=a,a.conceptsArray=[],a.conceptDictionary=[]},286:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Connection=void 0;const o=n(193);t.Connection=class{constructor(e=0,t,n,r,i,c,a,s,u,d,l,h,f,p,y,v){this.isTemp=!1,this.id=e,this.OfTheConceptId=t,this.ToTheConceptId=n,this.ofTheConceptId=t,this.toTheConceptId=n,this.OfTheConceptUserId=r,this.ToTheConceptUserId=i,this.userId=c,this.typeId=a,this.typeUserId=s,this.orderId=u,this.orderUserId=d,this.securityId=l,this.securityUserId=h,this.accessId=f,this.accessUserId=p,this.sessionInformationId=y,this.sessionInformationUserId=v,this.entryTimeStamp=new Date,this.terminationDateTime=new Date,o.ConnectionData.AddConnection(this),this.localSyncTime=new Date}}},193:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectionData=void 0;const o=n(943);class r{constructor(){this.name="Connection Array"}static CheckContains(e){for(var t=!1,n=0;n<this.connectionArray.length;n++)this.connectionArray[n].id==e.id&&(t=!0);return t}static AddConnection(e){this.CheckContains(e)&&this.RemoveConnection(e),(0!=e.id||e.isTemp)&&(0,o.storeToDatabase)("connection",e),this.connectionArray.push(e)}static AddToDictionary(e){this.connectionDictionary[e.id]=e}static RemoveConnection(e){for(var t=0;t<this.connectionArray.length;t++)this.connectionArray[t].id==e.id&&this.connectionArray.splice(t,1);0!=e.id&&(0,o.removeFromDatabase)("connection",e.id)}static GetConnection(e){var t;t=null;for(var n=0;n<this.connectionArray.length;n++)this.connectionArray[n].id==e&&(t=this.connectionArray[n]);return t}static GetConnectionsOfCompositionLocal(e){for(var t=[],n=0;n<this.connectionArray.length;n++)this.connectionArray[n].typeId==e&&t.push(this.connectionArray[n]);return t}getName(){return this.name}}t.ConnectionData=r,r.connectionArray=[],r.connectionDictionary=[]},853:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Node=void 0,t.Node=class{constructor(e,t,n,o){this.height=1,this.key=e,this.value=t,this.leftNode=n,this.rightNode=o}addNode(e,t,n){if(null==t)return e;var o=t.leftNode,r=t.rightNode;if(t.key>e.key)t.leftNode=this.addNode(e,o,n);else{if(!(t.key<e.key))return t;t.rightNode=this.addNode(e,r,n)}t.height=1+Math.max(this.getHeight(t.leftNode),this.getHeight(t.rightNode));let i=this.getBalanceFactor(t);if(i>1&&t.leftNode){if(e.key<t.leftNode.key)return this.rightRotate(t);if(e.key>t.leftNode.key)return t.leftNode=this.leftRotate(t.leftNode),this.rightRotate(t)}if(i<-1&&t.rightNode){if(e.key>t.rightNode.key)return this.leftRotate(t);if(e.key<t.rightNode.key)return t.rightNode=this.rightRotate(t.rightNode),this.leftRotate(t)}return t}rightRotate(e){if(e){let t=e.leftNode;if(t){let n=t.rightNode;e.leftNode=n,t.rightNode=e,e.height=Math.max(this.getHeight(e.leftNode),this.getHeight(e.rightNode))+1,t.height=Math.max(this.getHeight(t.leftNode),this.getHeight(t.rightNode))+1}return t}return e}leftRotate(e){if(e){let t=e.rightNode;if(t){let n=t.leftNode;t.leftNode=e,e.rightNode=n,e.height=Math.max(this.getHeight(e.leftNode),this.getHeight(e.rightNode)+1),t.height=Math.max(this.getHeight(t.leftNode),this.getHeight(e.rightNode)+1)}return t}return e}getHeight(e){return e?e.height:0}getBalanceFactor(e){return null==e?0:this.getHeight(e.leftNode)-this.getHeight(e.rightNode)}getFromNode(e,t){return t?e==t.key?t:e<this.key?this.getFromNode(e,t.leftNode):e>this.key?this.getFromNode(e,t.rightNode):t:t}}},49:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ReservedIds=void 0;const r=n(621);class i{static getId(){return o(this,void 0,void 0,(function*(){this.ids.length<5&&(yield(0,r.GetReservedIds)());var e=this.ids[0];return this.ids.shift(),e}))}static AddId(e){this.ids.includes(e)||this.ids.push(e)}}t.ReservedIds=i,i.ids=[]},918:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Returner=void 0,t.Returner=class{constructor(e,t,n,o){this.id=e,this.userId=t,this.referentId=n,this.isNew=o}}},132:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SyncData=void 0;const r=n(943),i=n(310),c=n(969),a=n(155),s=n(193);class u{static CheckContains(e){for(var t=!1,n=0;n<this.conceptsSyncArray.length;n++)this.conceptsSyncArray[n].id==e.id&&(t=!0);return t}static SyncDataDelete(e){this.conceptsSyncArray.splice(e,1);for(var t=0;t<this.connectionSyncArray.length;t++)this.connectionSyncArray[t].ofTheConceptId!=e&&this.connectionSyncArray[t].toTheConceptId!=e&&this.connectionSyncArray[t].typeId!=e||this.connectionSyncArray.splice(t,1)}static CheckContainsConnection(e){for(var t=!1,n=0;n<this.connectionSyncArray.length;n++)this.connectionSyncArray[n].id==e.id&&(t=!0);return t}static AddConcept(e){a.ConceptsData.AddConceptTemporary(e),this.conceptsSyncArray.push(e)}static RemoveConcept(e){for(var t=0;t<this.conceptsSyncArray.length;t++)this.conceptsSyncArray[t].id==e.id&&this.conceptsSyncArray.splice(t,1)}static AddConnection(e){s.ConnectionData.AddConnection(e),this.connectionSyncArray.push(e)}static RemoveConnection(e){for(var t=0;t<this.connectionSyncArray.length;t++)this.connectionSyncArray[t].id==e.id&&this.connectionSyncArray.splice(t,1)}static SyncDataOnline(){return o(this,void 0,void 0,(function*(){return this.conceptsSyncArray.length>0&&(yield(0,i.CreateTheConceptApi)(this.conceptsSyncArray),this.conceptsSyncArray=[]),this.connectionSyncArray.length>0&&(yield(0,c.CreateTheConnectionApi)(this.connectionSyncArray),this.connectionSyncArray=[]),"done"}))}static syncDataLocalDb(){return o(this,void 0,void 0,(function*(){if(this.conceptsSyncArray.length>0){for(let e=0;e<this.conceptsSyncArray.length;e++)(0,r.storeToDatabase)("concept",this.conceptsSyncArray[e]);this.conceptsSyncArray=[]}if(console.log("storing in the connection table"),this.connectionSyncArray.length>0){for(let e=0;e<this.conceptsSyncArray.length;e++)console.log("storing in the connection table"),(0,r.storeToDatabase)("connection",this.connectionSyncArray[e]);this.connectionSyncArray=[]}return"done"}))}}t.SyncData=u,u.conceptsSyncArray=[],u.connectionSyncArray=[]},446:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TheCharacter=void 0,t.TheCharacter=class{constructor(e,t,n,o,r,i,c,a,s,u){this.id=0,this.isNew=!1,this.userId=e,this.data=`${t}`,this.securityId=n,this.securityUserId=o,this.accessId=r,this.accessUserId=i,this.sessionId=c,this.sessionUserId=a,this.isNew=u}}},819:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TheTexts=void 0,t.TheTexts=class{constructor(e,t,n,o,r,i,c,a,s,u){this.id=0,this.userId=e,this.data=t,this.securityId=n,this.securityUserId=o,this.accessId=r,this.accessUserId=i,this.sessionId=c,this.sessionUserId=a,this.entryTimestamp=s,this.isNew=u}}},943:function(e,t){var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.removeFromDatabase=t.getFromDatabaseWithTypeOld=t.getFromDatabaseWithType=t.getFromDatabase=t.storeToDatabase=t.openDatabase=void 0;function o(e){const t=indexedDB.open("FreeSchema",4);t.onerror=e=>{console.error("Why didn't you allow my web app to use IndexedDB?!")},t.onsuccess=function(t){t.target.result.transaction(e,"readwrite")},t.onupgradeneeded=e=>{var t=e.target.result,n="concept",o="connection",r="synctimestamp";t.objectStoreNames.contains(n)||(t.createObjectStore(n,{keyPath:"id"}).transaction.oncomplete=e=>{}),t.objectStoreNames.contains(o)||(t.createObjectStore(o,{keyPath:"id"}).transaction.oncomplete=e=>{}),t.objectStoreNames.contains(r)||t.createObjectStore(r)}}t.openDatabase=o,t.storeToDatabase=function(e,t){o(e);const n=indexedDB.open("FreeSchema",4);n.onerror=e=>{console.error("Why didn't you allow my web app to use IndexedDB?!")},n.onsuccess=function(n){0!=t.id&&n.target.result.transaction(e,"readwrite").objectStore(e).add(t)},n.onupgradeneeded=e=>{var t=e.target.result,n="concept",o="connection",r="synctimestamp";t.objectStoreNames.contains(n)||(t.createObjectStore(n,{keyPath:"id"}).transaction.oncomplete=e=>{}),t.objectStoreNames.contains(o)||(t.createObjectStore(o,{keyPath:"id"}).transaction.oncomplete=e=>{}),t.objectStoreNames.contains(r)||t.createObjectStore(r)}},t.getFromDatabase=function(e,t){var n;o(e),indexedDB.open("FreeSchema",4).onsuccess=function(o){return o.target.result.transaction(e,"readwrite").objectStore(e).get(t).onsuccess=function(e){let t=e.target;return n=t.result},n}},t.getFromDatabaseWithType=function(e,t,r){return n(this,void 0,void 0,(function*(){return new Promise((function(n,i){o(e);const c=indexedDB.open("FreeSchema",4);var a,s=[];c.onsuccess=function(o){o.target.result.transaction(e,"readwrite").objectStore(e).openCursor().onsuccess=e=>{let n=e.target.result;n&&(n.value[t]==r&&(a=n.value,s.push(a)),n.continue())},n(s)},c.onerror=function(e){i(e)}}))}))},t.getFromDatabaseWithTypeOld=function(e){return n(this,void 0,void 0,(function*(){return new Promise((function(t,n){o(e);const r=indexedDB.open("FreeSchema",4);var i=[];r.onsuccess=function(n){var o=n.target.result.transaction(e,"readwrite").objectStore(e).getAll();o.onsuccess=()=>{const e=o.result;for(var n=0;n<e.length;n++)i.push(e[n]);t(i)}},r.onerror=function(e){n(e)}}))}))},t.removeFromDatabase=function(e,t){o(e),indexedDB.open("FreeSchema",4).onsuccess=function(n){n.target.result.transaction(e,"readwrite").objectStore(e).delete(t).onsuccess=function(e){e.target}}}},262:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(696),i=n(853),c=n(752);t.default=function(){return o(this,void 0,void 0,(function*(){new r.BinaryTree;(new Date).getTime();var e=yield(0,c.getFromDatabaseWithTypeOld)("concept");if(Array.isArray(e))for(var t=0;t<e.length;t++){let n=e[t],o=new i.Node(n.id,n,null,null);r.BinaryTree.addNodeToTree(o)}(new Date).getTime()}))}},126:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CreateConnectionBetweenTwoConcepts=void 0;const i=n(286),c=n(132),a=r(n(843));t.CreateConnectionBetweenTwoConcepts=function(e,t,n,r=!1){var s,u;return o(this,void 0,void 0,(function*(){var o=e.userId,d=o,l=o;if(r){let r=(null===(s=e.type)||void 0===s?void 0:s.characterValue)+"_s_"+n+"_by";var h=yield(0,a.default)("connection",r,!1,999,999,999),f=new i.Connection(0,t.id,e.id,t.userId,e.userId,t.userId,h.id,h.userId,1e3,o,999,d,4,l,999,999);c.SyncData.AddConnection(f)}let p=(null===(u=e.type)||void 0===u?void 0:u.characterValue)+"_s_"+n+"_s";var y=yield(0,a.default)("connection",p,!1,999,999,999);f=new i.Connection(0,e.id,t.id,e.userId,t.userId,e.userId,y.id,y.userId,1e3,o,999,d,4,l,999,999),c.SyncData.AddConnection(f)}))}},795:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(169)),c=r(n(843));t.default=function e(t,n=null,r=null,a=null,s=null,u=null,d=null){return o(this,void 0,void 0,(function*(){var o,l=null!=s?s:10267,h=null!=u?u:10267,f=null!=d?d:10267,p=null!=a?a:0;for(const a in t)if("string"!=typeof t[a]&&"number"!=typeof t[a])if(null==n&&null==r){var y=p;o=_=yield(0,c.default)(a,"",!0,l,h,f),y=_.id,p=_.id,yield e(t[a],_.id,_.userId,y,s,u,d)}else{var v=null!=n?n:999,C=null!=r?r:10267,_=(y=p,yield(0,c.default)(a,"",!0,l,h,f));yield(0,i.default)(v,C,_.id,_.userId,y,f,_.userId),yield e(t[a],_.id,_.userId,y,s,u,d)}else v=null!=n?n:999,C=null!=r?r:10267,y=p,_=yield(0,c.default)(a,t[a],!1,l,h,f),yield(0,i.default)(v,C,_.id,_.userId,y,f,_.userId);return o}))}},602:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(204),i=n(49),c=n(132);t.default=function(e,t,n,a,s,u,d,l,h,f,p,y,v,C){return o(this,void 0,void 0,(function*(){var o=yield i.ReservedIds.getId(),_=new r.Concept(o,t,s,u,n,a,d,l,e,h,f,p,y,v,C,!0);return _.isTemp=!0,c.SyncData.AddConcept(_),_}))}},169:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=n(286),r=n(132),i=n(722);t.default=function(e,t,n,c,a,s,u){var d=t,l=t,h=t,f=t,p=t,y=new o.Connection(0,e,n,t,c,h,a,l,1,d,0,f,4,p,s,u);y.isTemp=!0,y.id=(0,i.genHexString)(10),r.SyncData.AddConnection(y)}},722:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.genHexString=void 0,t.genHexString=function(e){let t=0;for(let n=0;n<e;++n)t+=Math.floor(16*Math.random());return-t}},133:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetCompositionWithId=t.GetComposition=void 0;const r=n(176),i=n(979),c=n(155);function a(e,t,n){var i,s,u;return o(this,void 0,void 0,(function*(){var o={},d=[],l=c.ConceptsData.GetConcept(e);if(null!=l&&0!=l.id||null==e||null==e||(l=yield(0,r.GetConcept)(e)),l&&null==l.type){var h=l.typeId,f=c.ConceptsData.GetConcept(h);l.type=f,null==f&&null!=h&&null!=h&&(f=yield(0,r.GetConcept)(h),l.type=f)}if(null===(i=null==l?void 0:l.type)||void 0===i||i.characterValue,!n.includes(e))return null==l?void 0:l.characterValue;for(var p=0;p<t.length;p++)if(t[p].ofTheConceptId==e){var y=t[p].toTheConceptId,v=c.ConceptsData.GetConcept(y);null!=v&&0!=v.id||null==y||null==y||(v=yield(0,r.GetConcept)(y)),v&&null==(null==v?void 0:v.type)&&(h=v.typeId,f=c.ConceptsData.GetConcept(h),v.type=f,null==f&&null!=h&&null!=h&&(f=yield(0,r.GetConcept)(h),v.type=f));var C=(null!==(u=null===(s=null==v?void 0:v.type)||void 0===s?void 0:s.characterValue)&&void 0!==u?u:"top").replace("the_","");if(isNaN(Number(C))){if(C){const e=yield a(y,t,n);o[C]=e}}else{const e=yield a(y,t,n);d[C]=e,o=d}}return o}))}t.GetComposition=function(e){var t,n;return o(this,void 0,void 0,(function*(){var o,s={};o=yield(0,i.GetAllConnectionsOfComposition)(e),console.log(o);for(var u=[],d=0;d<o.length;d++)u.includes(o[d].ofTheConceptId)||u.push(o[d].ofTheConceptId);var l=c.ConceptsData.GetConcept(e);null==l&&null!=e&&null!=e&&(l=yield(0,r.GetConcept)(e));var h=yield a(e,o,u);return s[null!==(n=null===(t=null==l?void 0:l.type)||void 0===t?void 0:t.characterValue)&&void 0!==n?n:"top"]=h,s}))},t.GetCompositionWithId=function(e){var t,n;return o(this,void 0,void 0,(function*(){var o,s={};o=yield(0,i.GetAllConnectionsOfComposition)(e);for(var u=[],d=0;d<o.length;d++)u.includes(o[d].ofTheConceptId)||u.push(o[d].ofTheConceptId);var l=c.ConceptsData.GetConcept(e);null==l&&null!=e&&null!=e&&(l=yield(0,r.GetConcept)(e));var h=yield a(e,o,u);s[null!==(n=null===(t=null==l?void 0:l.type)||void 0===t?void 0:t.characterValue)&&void 0!==n?n:"top"]=h;var f={};return f.data=s,f.id=e,f}))}},505:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GetCompositionList=void 0;const i=n(403),c=n(155),a=n(133),s=r(n(537));t.GetCompositionList=function(e){return o(this,void 0,void 0,(function*(){var t=yield(0,s.default)(e),n=[];if(t){yield(0,i.GetAllConceptsByType)(e,999);for(var o=c.ConceptsData.GetConceptsByTypeId(t.id),r=0;r<o.length;r++){var u=yield(0,a.GetComposition)(o[r].id),d=JSON.stringify(u);n.push(d)}}return n}))}},537:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(493),i=n(155);t.default=function(e){return o(this,void 0,void 0,(function*(){var t=yield i.ConceptsData.GetConceptByCharacter(e),n=`${e}`;return null!=t&&0!=(null==t?void 0:t.id)||!n||(console.log("now going online"),yield(0,r.GetConceptByCharacterValue)(e),t=yield i.ConceptsData.GetConceptByCharacter(e)),t}))}},543:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GetDataFromIndexDb=void 0;const r=n(155),i=n(193),c=n(943);t.GetDataFromIndexDb=function(){return o(this,void 0,void 0,(function*(){var e=yield(0,c.getFromDatabaseWithTypeOld)("concept");if(function(){o(this,void 0,void 0,(function*(){var e=yield(0,c.getFromDatabaseWithTypeOld)("connection");if(Array.isArray(e))for(var t=0;t<e.length;t++)i.ConnectionData.AddConnection(e[t])}))}(),Array.isArray(e))for(var t=0;t<e.length;t++)r.ConceptsData.AddConcept(e[t])}))}},804:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GetLink=void 0;const i=n(12),c=n(895),a=n(133),s=r(n(887));t.GetLink=function(e,t){var n;return o(this,void 0,void 0,(function*(){var o=[],r=yield(0,s.default)(e),u=(null===(n=r.type)||void 0===n?void 0:n.characterValue)+"_s_"+t,d=yield(0,i.GetConceptByCharacterAndType)(u,16);if(console.log(r),d.id>0){for(var l=yield(0,c.GetConnectionOfTheConcept)(d.id,r.id,r.userId),h=0;h<l.length;h++){let e=l[h].toTheConceptId,t=yield(0,s.default)(e),n=yield(0,a.GetComposition)(t.id);o.push(n)}console.log(o)}}))}},887:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(176),i=n(204),c=n(155);t.default=function(e){return o(this,void 0,void 0,(function*(){var t=new i.Concept(0,0,0,0,0,0,0,0,"0",0,0,0,0,0,0,!1);if(null!=(t=c.ConceptsData.GetConcept(e))&&0!=t.id||null==e||null==e||(t=yield(0,r.GetConcept)(e)),t&&null==t.type&&null==c.ConceptsData.GetConcept(t.typeId)&&null!=t.typeId&&null!=t.typeId){var n=yield(0,r.GetConcept)(t.typeId);t.type=n}return t}))}},257:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(887));t.default=function(e,t,n){return o(this,void 0,void 0,(function*(){return yield(0,i.default)(n)}))}},235:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(389)),c=r(n(335));t.default=function(e,t,n,r,a,s){return o(this,void 0,void 0,(function*(){var o=t,u=t;a=t;var d,l=t,h=t,f=t;if(1==e.length){var p=e.charCodeAt(0);yield(0,i.default)(e,t,n,r,s),d=(0,c.default)(e,t,4,o,p,f,49,l,n,u,r,a,s,h)}else{var y=yield(0,i.default)(e,t,n,r,s);d=(y.isNew,yield(0,c.default)(e,t,4,o,51,l,y.id,y.userId,n,u,r,a,s,h))}return d}))}},389:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),i=n(446);t.default=function(e,t,n,c,a){return o(this,void 0,void 0,(function*(){var o=t,s=t,u=t,d=new i.TheCharacter(t,e,n,s,c,o,a,u,"",!1);return yield(0,r.CreateTheCharacter)(d)}))}},335:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(12),c=r(n(602));t.default=function(e,t,n,r,a,s,u,d,l,h,f,p,y,v){return o(this,void 0,void 0,(function*(){var o=yield(0,i.GetConceptByCharacterAndType)(e,a),C=o;return 0==C.id&&(C=o=yield(0,c.default)(e,t,n,r,a,s,u,d,l,h,f,p,y,v)),C}))}},843:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(773),c=n(12),a=n(819),s=r(n(602)),u=n(578),d=r(n(315));t.default=function(e,t,n=!1,r,l,h=999){return o(this,void 0,void 0,(function*(){h=999;var o,l,f,p=999,y=r,v=r,C=r,_=t.length;if(f=e.startsWith("the_")?e:"the_"+e,n)o=yield(0,d.default)(e,h,r,r),l=yield(0,s.default)(t,r,4,r,o.id,o.userId,0,999,p,y,4,C,h,v);else if(_>255){o=yield(0,d.default)(f,h,v,r),l=yield(0,s.default)(t,r,4,r,o.id,o.userId,0,999,p,y,4,C,h,v);var g=new a.TheTexts(r,t,p,y,4,C,h,v,Date.now().toString(),!0);yield(0,i.CreateTextData)(g)}else{o=yield(0,d.default)(f,h,v,r);var m=yield(0,c.GetConceptByCharacterAndType)(t,o.id),w=yield(0,u.MakeTheName)(t,r,p,y,4,C,h,v,o.id,o.userId,m);l=m,0==m.id&&0==m.userId&&(l=yield(0,s.default)(t,r,4,r,o.id,o.userId,w.id,w.userId,p,y,4,C,h,v))}return l.type=o,l}))}},578:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MakeTheName=void 0;const i=r(n(257)),c=r(n(235)),a=r(n(335));t.MakeTheName=function(e,t,n,r,s,u,d,l,h,f,p){return o(this,void 0,void 0,(function*(){var o,h=null!=d?d:999,y=null!=l?l:999;return s=null!=s?s:4,u=null!=u?u:999,p.id>0&&p.userId>0?o=yield(0,i.default)(p.id,p.userId,p.referent):(o=yield(0,c.default)(e,t,n,s,u,h),p=yield(0,a.default)(e,t,4,999,12,f,o.id,o.userId,n,r,s,u,h,y)),p}))}},315:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function a(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}s((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(602)),c=r(n(537)),a=r(n(235)),s=n(665);t.default=function e(t,n,r,u){return o(this,void 0,void 0,(function*(){var o=u,d=yield(0,c.default)(t);if(d&&(0==d.id||0==d.userId)){var l=(0,s.SplitStrings)(t);if(l[0]==t)d=yield(0,a.default)(t,u,999,999,o,n);else{e(l[0],n,r,u);var h=yield e(l[1],n,r,u);h&&(d=yield(0,i.default)(t,u,1,u,h.id,u,999,u,999,u,999,u,n,u))}}return d}))}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SplitStrings=void 0,t.SplitStrings=function(e){return e.split("_")}},752:function(e,t,n){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ConceptsData=t.Concept=t.SyncData=t.GetLink=t.GetConceptByCharacter=t.CreateTheConnection=t.getFromDatabaseWithTypeOld=t.getFromDatabaseWithType=t.getFromDatabase=t.storeToDatabase=t.MakeTheInstanceConcept=t.GetTheConcept=t.CreateConnectionBetweenTwoConcepts=t.CreateComposition=t.GetCompositionWithId=t.GetComposition=t.GetCompositionList=t.SplitStrings=void 0;const r=o(n(262));var i=n(665);Object.defineProperty(t,"SplitStrings",{enumerable:!0,get:function(){return i.SplitStrings}});var c=n(505);Object.defineProperty(t,"GetCompositionList",{enumerable:!0,get:function(){return c.GetCompositionList}});var a=n(133);Object.defineProperty(t,"GetComposition",{enumerable:!0,get:function(){return a.GetComposition}}),Object.defineProperty(t,"GetCompositionWithId",{enumerable:!0,get:function(){return a.GetCompositionWithId}});var s=n(795);Object.defineProperty(t,"CreateComposition",{enumerable:!0,get:function(){return o(s).default}});var u=n(126);Object.defineProperty(t,"CreateConnectionBetweenTwoConcepts",{enumerable:!0,get:function(){return u.CreateConnectionBetweenTwoConcepts}});var d=n(887);Object.defineProperty(t,"GetTheConcept",{enumerable:!0,get:function(){return o(d).default}});var l=n(843);Object.defineProperty(t,"MakeTheInstanceConcept",{enumerable:!0,get:function(){return o(l).default}});var h=n(943);Object.defineProperty(t,"storeToDatabase",{enumerable:!0,get:function(){return h.storeToDatabase}}),Object.defineProperty(t,"getFromDatabase",{enumerable:!0,get:function(){return h.getFromDatabase}}),Object.defineProperty(t,"getFromDatabaseWithType",{enumerable:!0,get:function(){return h.getFromDatabaseWithType}}),Object.defineProperty(t,"getFromDatabaseWithTypeOld",{enumerable:!0,get:function(){return h.getFromDatabaseWithTypeOld}});var f=n(169);Object.defineProperty(t,"CreateTheConnection",{enumerable:!0,get:function(){return o(f).default}});var p=n(537);Object.defineProperty(t,"GetConceptByCharacter",{enumerable:!0,get:function(){return o(p).default}});var y=n(804);Object.defineProperty(t,"GetLink",{enumerable:!0,get:function(){return y.GetLink}});var v=n(132);Object.defineProperty(t,"SyncData",{enumerable:!0,get:function(){return v.SyncData}});var C=n(204);Object.defineProperty(t,"Concept",{enumerable:!0,get:function(){return C.Concept}});var _=n(155);Object.defineProperty(t,"ConceptsData",{enumerable:!0,get:function(){return _.ConceptsData}});const g=n(543);(0,r.default)(),(0,g.GetDataFromIndexDb)()}},t={};return function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}(752)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,